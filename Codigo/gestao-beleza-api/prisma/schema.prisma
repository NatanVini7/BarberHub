generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ===============================================
// Modelos Principais (Identidade)
// ===============================================

model estabelecimentos {
  id                      Int                        @id @default(autoincrement())
  nome_fantasia           String                     @db.VarChar(255)
  razao_social            String?                    @db.VarChar(255)
  documento               String?                    @unique(map: "documento_UNIQUE") @db.VarChar(20)
  status                  EstabelecimentoStatus      @default(PENDENTE)
  criado_em               DateTime                   @default(now()) @db.Timestamp(0)
  atualizado_em           DateTime                   @updatedAt @db.Timestamp(0)

  // Relações (lado "um" de muitas)
  vinculos                vinculos[]
  horarios_funcionamento  horarios_funcionamento[]
  horarios_excecao        horarios_excecao[]
  registros_jornada_diaria registros_jornada_diaria[]
  categorias_servicos     categorias_servicos[]
  servicos                servicos[]
  produtos                produtos[]
  recursos                recursos[]
  pacotes                 pacotes[]
  despesas                despesas[]
  agendamentos            agendamentos[]
  comandas                comandas[]
}

model pessoas {
  id                Int       @id @default(autoincrement())
  nome_completo     String    @db.VarChar(255)
  documento         String?   @unique(map: "documento_UNIQUE") @db.VarChar(20)
  tipo_documento    pessoas_tipo_documento?
  data_nascimento   DateTime? @db.Date
  criado_em         DateTime  @default(now()) @db.Timestamp(0)
  atualizado_em     DateTime  @updatedAt @db.Timestamp(0)

  // Relações
  usuario                   usuarios?
  vinculos                  vinculos[]
  profissionais_servicos    profissionais_servicos[]
  comanda_itens_profissionais comanda_itens[] // Itens que executou como profissional
  comandas_como_cliente     comandas[] // Comandas como cliente
  agendamentos_como_cliente agendamentos[] @relation("agendamentos_cliente")
  agendamentos_como_profissional agendamentos[] @relation("agendamentos_profissional")
  avaliacoes_feitas         avaliacoes[]
  pacotes_comprados         pacotes_clientes[]
  fichas_como_cliente       fichas_anamnese[] @relation("ficha_cliente")
  fichas_como_profissional  fichas_anamnese[] @relation("ficha_profissional")
}

model usuarios {
  id              Int       @id @default(autoincrement())
  id_pessoa       Int       @unique // Garante que uma pessoa só tem um usuário
  email           String    @unique(map: "email_UNIQUE") @db.VarChar(255)
  senha           String    @db.VarChar(255)
  ultimo_login_em DateTime? @db.Timestamp(0)
  criado_em       DateTime  @default(now()) @db.Timestamp(0)
  atualizado_em   DateTime  @updatedAt @db.Timestamp(0)

  pessoa          pessoas   @relation(fields: [id_pessoa], references: [id], onDelete: Cascade)
}

model vinculos {
  id                 Int      @id @default(autoincrement())
  id_pessoa          Int
  id_estabelecimento Int
  perfil             vinculos_perfil
  esta_ativo         Boolean  @default(true)
  criado_em          DateTime @default(now()) @db.Timestamp(0)
  atualizado_em      DateTime @updatedAt @db.Timestamp(0)

  pessoa             pessoas         @relation(fields: [id_pessoa], references: [id], onDelete: Cascade)
  estabelecimento    estabelecimentos @relation(fields: [id_estabelecimento], references: [id], onDelete: Cascade)

  @@unique([id_pessoa, id_estabelecimento, perfil], map: "uk_pessoa_estabelecimento_perfil")
}


// ===============================================
// Modelos Polimórficos
// ===============================================

model enderecos {
  id            Int      @id @default(autoincrement())
  entidade_id   Int
  entidade_tipo String   @db.VarChar(50)
  cep           String?  @db.VarChar(9)
  rua           String   @db.VarChar(255)
  numero        String?  @db.VarChar(20)
  complemento   String?  @db.VarChar(100)
  bairro        String?  @db.VarChar(100)
  cidade        String   @db.VarChar(100)
  estado        String   @db.VarChar(50)
  criado_em     DateTime @default(now()) @db.Timestamp(0)
  atualizado_em DateTime @updatedAt @db.Timestamp(0)

  @@index([entidade_id, entidade_tipo], map: "idx_entidade_endereco")
}

model contatos {
  id            Int           @id @default(autoincrement())
  entidade_id   Int
  entidade_tipo String        @db.VarChar(50)
  tipo          contatos_tipo
  valor         String        @db.VarChar(255)
  eh_principal  Boolean       @default(false)
  criado_em     DateTime      @default(now()) @db.Timestamp(0)
  atualizado_em DateTime      @updatedAt @db.Timestamp(0)

  @@index([entidade_id, entidade_tipo], map: "idx_entidade_contato")
}

// ===============================================
// Modelos de Operação e Horários
// ===============================================

model horarios_funcionamento {
  id                  Int                               @id @default(autoincrement())
  id_estabelecimento  Int
  dia_semana          horarios_funcionamento_dia_semana
  horario_abertura    DateTime?                         @db.Time(0)
  horario_fechamento  DateTime?                         @db.Time(0)
  horario_inicio_pausa DateTime?                        @db.Time(0)
  horario_fim_pausa   DateTime?                         @db.Time(0)
  esta_aberto         Boolean                           @default(true)
  criado_em           DateTime                          @default(now()) @db.Timestamp(0)
  atualizado_em       DateTime                          @updatedAt @db.Timestamp(0)

  estabelecimento     estabelecimentos                  @relation(fields: [id_estabelecimento], references: [id], onDelete: Cascade)

  @@unique([id_estabelecimento, dia_semana], map: "uk_estabelecimento_dia_semana")
}

model horarios_excecao {
  id                  Int              @id @default(autoincrement())
  id_estabelecimento  Int
  data_excecao        DateTime         @db.Date
  descricao           String?          @db.VarChar(255)
  esta_aberto         Boolean
  horario_abertura    DateTime?        @db.Time(0)
  horario_fechamento  DateTime?        @db.Time(0)
  criado_em           DateTime         @default(now()) @db.Timestamp(0)
  atualizado_em       DateTime         @updatedAt @db.Timestamp(0)

  estabelecimento     estabelecimentos @relation(fields: [id_estabelecimento], references: [id], onDelete: Cascade)

  @@unique([id_estabelecimento, data_excecao], map: "uk_excecao_estabelecimento_data")
}

model registros_jornada_diaria {
  id                   Int                                   @id @default(autoincrement())
  id_estabelecimento   Int
  data_jornada         DateTime                              @db.Date
  hora_abertura_real   DateTime?                             @db.Time(0)
  hora_fechamento_real DateTime?                             @db.Time(0)
  status_dia           registros_jornada_diaria_status_dia
  criado_em            DateTime                              @default(now()) @db.Timestamp(0)
  atualizado_em        DateTime                              @updatedAt @db.Timestamp(0)

  estabelecimento      estabelecimentos                      @relation(fields: [id_estabelecimento], references: [id], onDelete: Cascade)

  @@unique([id_estabelecimento, data_jornada], map: "uk_estabelecimento_data")
}

// ===============================================
// Modelos de Catálogo (Serviços, Produtos, etc.)
// ===============================================

model categorias_servicos {
  id                Int      @id @default(autoincrement())
  id_estabelecimento Int
  nome              String   @db.VarChar(100)
  ordem_exibicao    Int      @default(0)
  criado_em         DateTime @default(now()) @db.Timestamp(0)
  atualizado_em     DateTime @updatedAt @db.Timestamp(0)

  estabelecimento   estabelecimentos @relation(fields: [id_estabelecimento], references: [id], onDelete: Cascade)
  servicos          servicos[]
}

model servicos {
  id                     Int       @id @default(autoincrement())
  id_estabelecimento     Int
  id_categoria           Int?
  nome                   String    @db.VarChar(100)
  descricao              String?   @db.Text
  preco                  Decimal   @db.Decimal(10, 2)
  duracao_minutos        Int
  esta_ativo             Boolean   @default(true)
  criado_em              DateTime  @default(now()) @db.Timestamp(0)
  atualizado_em          DateTime  @updatedAt @db.Timestamp(0)
  
  estabelecimento        estabelecimentos         @relation(fields: [id_estabelecimento], references: [id], onDelete: Cascade)
  categoria              categorias_servicos?     @relation(fields: [id_categoria], references: [id], onUpdate: NoAction, onDelete: SetNull)
  profissionais_habilitados profissionais_servicos[]
  agendamentos           agendamentos[]
  comanda_itens          comanda_itens[]
}

model produtos {
  id                  Int      @id @default(autoincrement())
  id_estabelecimento  Int
  nome                String   @db.VarChar(100)
  descricao           String?  @db.Text
  codigo_barras       String?  @unique @db.VarChar(100)
  preco_venda         Decimal  @db.Decimal(10, 2)
  preco_custo         Decimal? @db.Decimal(10, 2)
  quantidade_estoque  Int      @default(0)
  estoque_minimo      Int      @default(0)
  esta_ativo          Boolean  @default(true)
  criado_em           DateTime @default(now()) @db.Timestamp(0)
  atualizado_em       DateTime @updatedAt @db.Timestamp(0)

  estabelecimento     estabelecimentos @relation(fields: [id_estabelecimento], references: [id], onDelete: Cascade)
  comanda_itens       comanda_itens[]
}

model profissionais_servicos {
  id_pessoa_profissional Int
  id_servico             Int

  profissional           pessoas  @relation(fields: [id_pessoa_profissional], references: [id], onDelete: Cascade)
  servico                servicos @relation(fields: [id_servico], references: [id], onDelete: Cascade)

  @@id([id_pessoa_profissional, id_servico])
}

// ===============================================
// Modelos de Transação (Agendamentos, Comandas, etc.)
// ===============================================

model comandas {
  id                   Int      @id @default(autoincrement())
  id_estabelecimento   Int
  id_pessoa_cliente    Int
  valor_total          Decimal  @default(0.00) @db.Decimal(10, 2)
  valor_desconto       Decimal  @default(0.00) @db.Decimal(10, 2)
  valor_final          Decimal  @default(0.00) @db.Decimal(10, 2)
  status               comandas_status @default(ABERTA)
  criado_em            DateTime @default(now()) @db.Timestamp(0)
  atualizado_em        DateTime @updatedAt @db.Timestamp(0)
  
  estabelecimento      estabelecimentos   @relation(fields: [id_estabelecimento], references: [id], onDelete: Restrict)
  cliente              pessoas            @relation(fields: [id_pessoa_cliente], references: [id], onDelete: Restrict)
  agendamentos         agendamentos[]
  itens                comanda_itens[]
  pagamentos           pagamentos[]
  pacotes_comprados    pacotes_clientes[]
}

model comanda_itens {
  id                     Int       @id @default(autoincrement())
  id_comanda             Int
  id_servico             Int?
  id_produto             Int?
  id_pessoa_profissional Int?
  preco_unitario         Decimal   @db.Decimal(10, 2)
  quantidade             Int       @default(1)
  criado_em              DateTime  @default(now()) @db.Timestamp(0)
  atualizado_em          DateTime  @updatedAt @db.Timestamp(0)
  
  comanda                comandas  @relation(fields: [id_comanda], references: [id], onDelete: Cascade)
  servico                servicos? @relation(fields: [id_servico], references: [id], onDelete: Restrict)
  produto                produtos? @relation(fields: [id_produto], references: [id], onDelete: Restrict)
  profissional           pessoas?  @relation(fields: [id_pessoa_profissional], references: [id], onDelete: Restrict)
}

model agendamentos {
  id                      Int                 @id @default(autoincrement())
  id_estabelecimento      Int
  id_pessoa_cliente       Int
  id_pessoa_profissional  Int
  id_servico              Int
  id_comanda              Int?
  data_hora_inicio        DateTime            @db.DateTime(0)
  data_hora_fim           DateTime            @db.DateTime(0)
  status                  agendamentos_status @default(AGENDADO)
  observacoes_cliente     String?             @db.Text
  observacoes_internas    String?             @db.Text
  criado_em               DateTime            @default(now()) @db.Timestamp(0)
  atualizado_em           DateTime            @updatedAt @db.Timestamp(0)
  
  estabelecimento         estabelecimentos    @relation(fields: [id_estabelecimento], references: [id], onDelete: Restrict)
  cliente                 pessoas             @relation("agendamentos_cliente", fields: [id_pessoa_cliente], references: [id], onDelete: Restrict)
  profissional            pessoas             @relation("agendamentos_profissional", fields: [id_pessoa_profissional], references: [id], onDelete: Restrict)
  servico                 servicos            @relation(fields: [id_servico], references: [id], onDelete: Restrict)
  comanda                 comandas?           @relation(fields: [id_comanda], references: [id], onDelete: SetNull)
  recursos_alocados       agendamentos_recursos[]
  avaliacao               avaliacoes?
}

model pagamentos {
  id                   Int                         @id @default(autoincrement())
  id_comanda             Int
  valor_pago             Decimal                     @db.Decimal(10, 2)
  metodo_pagamento       pagamentos_metodo_pagamento
  status                 pagamentos_status           @default(PENDENTE)
  data_pagamento         DateTime?                   @db.DateTime(0)
  data_liberacao         DateTime?                   @db.DateTime(0)
  id_transacao_gateway   String?                     @db.VarChar(255)
  criado_em              DateTime                    @default(now()) @db.Timestamp(0)
  atualizado_em          DateTime                    @updatedAt @db.Timestamp(0)
  
  comanda                comandas                    @relation(fields: [id_comanda], references: [id], onDelete: Restrict)
}

// ===============================================
// Modelos de Funcionalidades Adicionais
// ===============================================

model avaliacoes {
  id                       Int       @id @default(autoincrement())
  id_agendamento           Int       @unique(map: "uk_agendamento_id")
  id_pessoa_cliente        Int
  nota_profissional        Int?      @db.UnsignedTinyInt
  nota_estabelecimento     Int?      @db.UnsignedTinyInt
  comentario               String?   @db.Text
  resposta_estabelecimento String?   @db.Text
  esta_visivel             Boolean   @default(true)
  criado_em                DateTime  @default(now()) @db.Timestamp(0)

  agendamento              agendamentos @relation(fields: [id_agendamento], references: [id], onDelete: Cascade)
  cliente                  pessoas      @relation(fields: [id_pessoa_cliente], references: [id], onDelete: Cascade)
}

model recursos {
  id                   Int       @id @default(autoincrement())
  id_estabelecimento   Int
  nome                 String    @db.VarChar(100)
  esta_ativo           Boolean   @default(true)
  criado_em            DateTime  @default(now()) @db.Timestamp(0)
  atualizado_em        DateTime  @updatedAt @db.Timestamp(0)

  estabelecimento      estabelecimentos        @relation(fields: [id_estabelecimento], references: [id], onDelete: Cascade)
  agendamentos_alocados agendamentos_recursos[]
}

model agendamentos_recursos {
  id_agendamento Int
  id_recurso     Int

  agendamento    agendamentos @relation(fields: [id_agendamento], references: [id], onDelete: Cascade)
  recurso        recursos     @relation(fields: [id_recurso], references: [id], onDelete: Cascade)

  @@id([id_agendamento, id_recurso])
}

model pacotes {
  id                  Int      @id @default(autoincrement())
  id_estabelecimento  Int
  nome                String   @db.VarChar(255)
  preco               Decimal  @db.Decimal(10, 2)
  quantidade_sessoes  Int
  validade_dias       Int
  esta_ativo          Boolean  @default(true)
  criado_em           DateTime @default(now()) @db.Timestamp(0)
  atualizado_em       DateTime @updatedAt @db.Timestamp(0)

  estabelecimento     estabelecimentos @relation(fields: [id_estabelecimento], references: [id], onDelete: Cascade)
  compras_pacote      pacotes_clientes[]
}

model pacotes_clientes {
  id                 Int                       @id @default(autoincrement())
  id_pacote          Int
  id_pessoa_cliente  Int
  id_comanda_compra  Int
  sessoes_total      Int
  sessoes_utilizadas Int                       @default(0)
  data_compra        DateTime                  @db.Date
  data_validade      DateTime                  @db.Date
  status             pacotes_clientes_status   @default(ATIVO)
  criado_em          DateTime                  @default(now()) @db.Timestamp(0)
  atualizado_em      DateTime                  @updatedAt @db.Timestamp(0)
  
  pacote             pacotes                   @relation(fields: [id_pacote], references: [id], onDelete: Restrict)
  cliente            pessoas                   @relation(fields: [id_pessoa_cliente], references: [id], onDelete: Restrict)
  comanda_compra     comandas                  @relation(fields: [id_comanda_compra], references: [id], onDelete: Restrict)
}

model despesas {
  id                  Int             @id @default(autoincrement())
  id_estabelecimento  Int
  descricao           String          @db.VarChar(255)
  valor               Decimal         @db.Decimal(10, 2)
  data_vencimento     DateTime        @db.Date
  data_pagamento      DateTime?       @db.Date
  status              despesas_status @default(PENDENTE)
  criado_em           DateTime        @default(now()) @db.Timestamp(0)
  atualizado_em       DateTime        @updatedAt @db.Timestamp(0)
  
  estabelecimento     estabelecimentos @relation(fields: [id_estabelecimento], references: [id], onDelete: Cascade)
}

model fichas_anamnese {
  id                       Int       @id @default(autoincrement())
  id_pessoa_cliente        Int
  id_pessoa_profissional   Int
  titulo                   String    @db.VarChar(255)
  observacoes_gerais       String?   @db.Text
  data_preenchimento       DateTime  @default(now()) @db.DateTime(0)
  criado_em                DateTime  @default(now()) @db.Timestamp(0)
  atualizado_em            DateTime  @updatedAt @db.Timestamp(0)

  cliente                  pessoas   @relation("ficha_cliente", fields: [id_pessoa_cliente], references: [id], onDelete: Restrict)
  profissional             pessoas   @relation("ficha_profissional", fields: [id_pessoa_profissional], references: [id], onDelete: Restrict)
}


// ===============================================
// Definições de Enums
// ===============================================

enum pessoas_tipo_documento {
  CPF
  CNPJ
}

enum vinculos_perfil {
  admin
  profissional
  cliente
}

enum contatos_tipo {
  email
  telefone
  whatsapp
  instagram
  tiktok
  facebook
}

enum horarios_funcionamento_dia_semana {
  DOMINGO
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
}

enum registros_jornada_diaria_status_dia {
  PLANEJADO
  EM_ANDAMENTO
  CONCLUIDO
  CANCELADO
}

enum comandas_status {
  ABERTA
  FECHADA
  PAGA
  CANCELADA
}

enum agendamentos_status {
  AGENDADO
  CONFIRMADO
  CONCLUIDO
  CANCELADO_CLIENTE
  CANCELADO_SALAO
  NAO_COMPARECEU
}

enum pagamentos_metodo_pagamento {
  DINHEIRO
  CARTAO_CREDITO
  CARTAO_DEBITO
  PIX
}

enum pagamentos_status {
  PENDENTE
  PAGO_EM_CUSTODIA
  LIBERADO_PARA_SALAO
  REEMBOLSADO
  EM_DISPUTA
}

enum pacotes_clientes_status {
  ATIVO
  CONCLUIDO
  EXPIRADO
}

enum despesas_status {
  PENDENTE
  PAGA
  ATRASADA
}

enum EstabelecimentoStatus {
  PENDENTE 
  ATIVO    
  RECUSADO 
  INATIVO  
}